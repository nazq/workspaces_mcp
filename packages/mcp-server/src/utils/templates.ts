import type { InstructionTemplate } from '../types/index.js';

export const DEFAULT_WORKSPACE_README = (
  workspaceName: string
): string => `# ${workspaceName}

Welcome to your new workspace! This folder is managed by Workspaces MCP.

## Getting Started

1. Add your project files to this directory
2. Create shared instructions for this project type if needed
3. The workspace will automatically appear in Claude Desktop resources

## Notes

- This README will not be automatically loaded as context
- Only files you explicitly add via MCP tools or the DXT CLI will be tracked
- Edit your global instructions to customize how Claude interacts with your projects

---

*Generated by Workspaces MCP*
`;

export const INSTRUCTION_TEMPLATES: Record<string, InstructionTemplate> = {
  'react-typescript': {
    name: 'React TypeScript Project',
    description: 'Instructions for React projects using TypeScript',
    content: `# React TypeScript Project Instructions

## Project Setup
- Use functional components with hooks
- Implement proper TypeScript types
- Follow React best practices
- Use ESLint and Prettier for code quality

## Code Style
- Use arrow functions for components
- Implement proper error boundaries
- Use React.memo for performance optimization
- Follow component composition patterns

## Testing
- Write unit tests with Jest and React Testing Library
- Test user interactions and component behavior
- Mock external dependencies appropriately
`,
  },

  'python-data': {
    name: 'Python Data Science',
    description: 'Instructions for Python data science projects',
    content: `# Python Data Science Project Instructions

## Environment Setup
- Use virtual environments (venv or conda)
- Include requirements.txt or environment.yml
- Use Jupyter notebooks for exploration
- Follow PEP 8 style guidelines

## Code Organization
- Separate data processing, analysis, and visualization
- Use pandas for data manipulation
- Implement proper error handling
- Document functions with docstrings

## Analysis Workflow
- Start with exploratory data analysis
- Clean and validate data thoroughly
- Use version control for data and code
- Create reproducible analysis pipelines
`,
  },

  'node-api': {
    name: 'Node.js API',
    description: 'Instructions for Node.js API development',
    content: `# Node.js API Project Instructions

## Project Structure
- Use Express.js for HTTP server
- Implement proper middleware
- Use TypeScript for type safety
- Follow REST API conventions

## Code Quality
- Use ESLint and Prettier
- Implement proper error handling
- Use environment variables for configuration
- Write comprehensive tests

## Security & Performance
- Implement input validation
- Use rate limiting and CORS
- Handle authentication properly
- Monitor performance metrics
`,
  },
};

export const getInstructionTemplate = (
  templateName: string
): InstructionTemplate | undefined => {
  return INSTRUCTION_TEMPLATES[templateName];
};

export const listInstructionTemplates = (): InstructionTemplate[] => {
  return Object.values(INSTRUCTION_TEMPLATES);
};
