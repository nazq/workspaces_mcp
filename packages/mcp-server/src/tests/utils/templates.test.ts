import { describe, expect, it } from 'vitest';

import {
  DEFAULT_WORKSPACE_README,
  getInstructionTemplate,
  INSTRUCTION_TEMPLATES,
  listInstructionTemplates,
} from '../../utils/templates.js';

describe('templates', () => {
  describe('DEFAULT_WORKSPACE_README', () => {
    it('should generate README with workspace name', () => {
      const workspaceName = 'my-awesome-project';
      const readme = DEFAULT_WORKSPACE_README(workspaceName);

      expect(readme).toContain(`# ${workspaceName}`);
      expect(readme).toContain('Welcome to your new workspace!');
    });

    it('should contain expected sections', () => {
      const workspaceName = 'test-workspace';
      const readme = DEFAULT_WORKSPACE_README(workspaceName);

      expect(readme).toContain('## Getting Started');
      expect(readme).toContain('## Notes');
      expect(readme).toContain('*Generated by Workspaces MCP*');
    });

    it('should contain helpful instructions', () => {
      const readme = DEFAULT_WORKSPACE_README('test');

      expect(readme).toContain('Add your project files to this directory');
      expect(readme).toContain('Create shared instructions');
      expect(readme).toContain('automatically appear in Claude Desktop');
      expect(readme).toContain('Edit your global instructions');
    });

    it('should handle workspace names with special characters', () => {
      const workspaceName = 'project-with_special-chars123';
      const readme = DEFAULT_WORKSPACE_README(workspaceName);

      expect(readme).toContain(`# ${workspaceName}`);
      expect(readme.length).toBeGreaterThan(100);
    });

    it('should have proper markdown formatting', () => {
      const readme = DEFAULT_WORKSPACE_README('test');

      // Should have main heading
      expect(readme.startsWith('# ')).toBe(true);
      // Should have subheadings
      expect(readme).toContain('## Getting Started');
      expect(readme).toContain('## Notes');
      // Should have ordered list
      expect(readme).toContain('1. Add your project files');
      // Should have horizontal rule
      expect(readme).toContain('---');
      // Should have italic footer
      expect(readme).toContain('*Generated by');
    });
  });

  describe('INSTRUCTION_TEMPLATES', () => {
    it('should have expected template names', () => {
      const templateNames = Object.keys(INSTRUCTION_TEMPLATES);
      
      expect(templateNames).toContain('react-typescript');
      expect(templateNames).toContain('python-data');
      expect(templateNames).toContain('node-api');
      expect(templateNames.length).toBe(3);
    });

    it('should have properly structured templates', () => {
      Object.entries(INSTRUCTION_TEMPLATES).forEach(([key, template]) => {
        expect(template).toHaveProperty('name');
        expect(template).toHaveProperty('description');
        expect(template).toHaveProperty('content');
        
        expect(typeof template.name).toBe('string');
        expect(typeof template.description).toBe('string');
        expect(typeof template.content).toBe('string');
        
        expect(template.name.length).toBeGreaterThan(0);
        expect(template.description.length).toBeGreaterThan(0);
        expect(template.content.length).toBeGreaterThan(50);
      });
    });

    describe('react-typescript template', () => {
      const template = INSTRUCTION_TEMPLATES['react-typescript'];

      it('should have correct metadata', () => {
        expect(template?.name).toBe('React TypeScript Project');
        expect(template?.description).toBe('Instructions for React projects using TypeScript');
      });

      it('should contain React-specific guidance', () => {
        expect(template?.content).toContain('functional components with hooks');
        expect(template?.content).toContain('TypeScript types');
        expect(template?.content).toContain('ESLint and Prettier');
        expect(template?.content).toContain('React Testing Library');
      });

      it('should have proper sections', () => {
        expect(template?.content).toContain('## Project Setup');
        expect(template?.content).toContain('## Code Style');
        expect(template?.content).toContain('## Testing');
      });
    });

    describe('python-data template', () => {
      const template = INSTRUCTION_TEMPLATES['python-data'];

      it('should have correct metadata', () => {
        expect(template?.name).toBe('Python Data Science');
        expect(template?.description).toBe('Instructions for Python data science projects');
      });

      it('should contain Python data science guidance', () => {
        expect(template?.content).toContain('virtual environments');
        expect(template?.content).toContain('Jupyter notebooks');
        expect(template?.content).toContain('pandas');
        expect(template?.content).toContain('PEP 8');
      });

      it('should have proper sections', () => {
        expect(template?.content).toContain('## Environment Setup');
        expect(template?.content).toContain('## Code Organization');
        expect(template?.content).toContain('## Analysis Workflow');
      });
    });

    describe('node-api template', () => {
      const template = INSTRUCTION_TEMPLATES['node-api'];

      it('should have correct metadata', () => {
        expect(template?.name).toBe('Node.js API');
        expect(template?.description).toBe('Instructions for Node.js API development');
      });

      it('should contain Node.js API guidance', () => {
        expect(template?.content).toContain('Express.js');
        expect(template?.content).toContain('REST API');
        expect(template?.content).toContain('middleware');
        expect(template?.content).toContain('rate limiting');
      });

      it('should have proper sections', () => {
        expect(template?.content).toContain('## Project Structure');
        expect(template?.content).toContain('## Code Quality');
        expect(template?.content).toContain('## Security & Performance');
      });
    });
  });

  describe('getInstructionTemplate', () => {
    it('should return correct template for valid name', () => {
      const template = getInstructionTemplate('react-typescript');
      
      expect(template).toBeDefined();
      expect(template?.name).toBe('React TypeScript Project');
      expect(template?.content).toContain('React TypeScript Project Instructions');
    });

    it('should return undefined for invalid template name', () => {
      const template = getInstructionTemplate('non-existent-template');
      
      expect(template).toBeUndefined();
    });

    it('should be case sensitive', () => {
      const template = getInstructionTemplate('REACT-TYPESCRIPT');
      
      expect(template).toBeUndefined();
    });

    it('should return different templates for different names', () => {
      const reactTemplate = getInstructionTemplate('react-typescript');
      const pythonTemplate = getInstructionTemplate('python-data');
      const nodeTemplate = getInstructionTemplate('node-api');

      expect(reactTemplate).not.toEqual(pythonTemplate);
      expect(pythonTemplate).not.toEqual(nodeTemplate);
      expect(reactTemplate).not.toEqual(nodeTemplate);
    });
  });

  describe('listInstructionTemplates', () => {
    it('should return all available templates', () => {
      const templates = listInstructionTemplates();
      
      expect(templates).toHaveLength(3);
      expect(templates).toEqual(Object.values(INSTRUCTION_TEMPLATES));
    });

    it('should return templates with correct structure', () => {
      const templates = listInstructionTemplates();
      
      templates.forEach((template) => {
        expect(template).toHaveProperty('name');
        expect(template).toHaveProperty('description');
        expect(template).toHaveProperty('content');
        
        expect(typeof template.name).toBe('string');
        expect(typeof template.description).toBe('string');
        expect(typeof template.content).toBe('string');
      });
    });

    it('should return templates in consistent order', () => {
      const templates1 = listInstructionTemplates();
      const templates2 = listInstructionTemplates();
      
      expect(templates1).toEqual(templates2);
    });

    it('should contain expected template names', () => {
      const templates = listInstructionTemplates();
      const names = templates.map((t) => t.name);
      
      expect(names).toContain('React TypeScript Project');
      expect(names).toContain('Python Data Science');
      expect(names).toContain('Node.js API');
    });

    it('should not be empty', () => {
      const templates = listInstructionTemplates();
      
      expect(templates.length).toBeGreaterThan(0);
    });
  });
});