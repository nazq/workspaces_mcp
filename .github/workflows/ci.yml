name: CI

on:
  push:
    branches: [main, develop, init]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test on Node ${{ matrix.node }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [18, 20, 22]
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Exclude some combinations to speed up CI
        exclude:
          - os: windows-latest
            node: 18
          - os: macos-latest
            node: 18

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format -- --check

      - name: Build
        run: npm run build

      - name: Unit tests
        run: npx vitest run --exclude="**/logger.test.ts" --exclude="**/index.test.ts" --exclude="**/mcp-protocol.test.ts" --coverage

      - name: MCP Protocol Integration tests
        run: npx vitest run tests/integration/mcp-protocol.test.ts --config vitest.integration.config.ts

      # CLI integration tests still need fixes
      # - name: CLI Integration tests
      #   run: npx vitest run tests/integration/cli-install.test.ts --config vitest.integration.config.ts

      - name: Upload coverage to Codecov
        if: matrix.node == 20 && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          slug: nazq/workspaces_mcp
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level high

      - name: Check for vulnerabilities
        run: npx audit-ci --config .auditci.json

  build-and-package:
    name: Build and Package DXT
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate manifest
        run: |
          echo "üîç Validating manifest.json..."
          if [ ! -f manifest.json ]; then
            echo "‚ùå manifest.json not found"
            exit 1
          fi
          echo "‚úÖ manifest.json found"
          cat manifest.json | jq '.' > /dev/null || (echo "‚ùå Invalid JSON in manifest.json" && exit 1)
          echo "‚úÖ manifest.json is valid JSON"

      - name: Build DXT package
        run: |
          echo "üì¶ Building DXT package..."
          npm run dxt:package
          ls -la *.dxt

      - name: Upload DXT package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: workspaces-mcp-dxt-${{ github.sha }}
          path: '*.dxt'
          retention-days: 30

      - name: Create Beta Release (on main)
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: beta-${{ github.sha }}
          release_name: Beta Release ${{ github.sha }}
          body: |
            Beta release of Workspaces MCP Server

            Built from commit: ${{ github.sha }}

            ## Installation
            Download the `.dxt` file and install via Claude Desktop extension manager.
          draft: false
          prerelease: true

      - name: Upload DXT to Beta Release
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./workspaces_mcp.dxt
          asset_name: workspaces-mcp-${{ github.sha }}.dxt
          asset_content_type: application/octet-stream
