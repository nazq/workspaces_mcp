name: PR Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "🔍 Validating PR title: $PR_TITLE"

          # Check for common patterns
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: ]]; then
            echo "✅ PR title follows conventional commit format"
          elif [[ ${#PR_TITLE} -ge 10 ]]; then
            echo "✅ PR title is descriptive enough"
          else
            echo "❌ PR title should be descriptive (10+ chars) or follow conventional commit format"
            echo "Examples:"
            echo "  feat: add workspace templates"
            echo "  fix: resolve memory leak in file watcher"
            echo "  docs: update installation guide"
            exit 1
          fi

      - name: Run full CI pipeline
        run: npm run ci

      - name: Check for changelog entry
        run: |
          echo "📋 Checking for changelog updates..."

          # Get files changed in this PR
          git diff --name-only origin/main...HEAD > changed_files.txt

          # Check if CHANGELOG.md was modified
          if grep -q "CHANGELOG.md" changed_files.txt; then
            echo "✅ Changelog has been updated"
          else
            echo "⚠️ No changelog entry detected"
            echo ""
            echo "If this PR introduces user-facing changes, please add a changelog entry:"
            echo "  npm run changelog add Added \"Your change description\""
            echo "  npm run changelog add Fixed \"Your bug fix description\""
            echo "  npm run changelog add Changed \"Your modification description\""
            echo ""
            echo "If no changelog entry is needed (docs, tests, internal changes), you can ignore this."
          fi

      - name: Validate changelog format
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            npm run changelog validate
          fi

      - name: Check test coverage
        run: |
          echo "📊 Checking test coverage..."
          npm run test:coverage -- --reporter=json > coverage.json

          # Extract coverage percentage
          COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
            const summary = coverage.coverageSummary || coverage;
            const lines = summary.total?.lines?.pct || summary.lines?.pct || 0;
            console.log(lines);
          " 2>/dev/null || echo "0")

          echo "Current coverage: ${COVERAGE}%"

          if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "✅ Test coverage is acceptable (${COVERAGE}% >= 70%)"
          else
            echo "⚠️ Test coverage is below 70% (${COVERAGE}%)"
            echo "Consider adding more tests to improve coverage"
          fi

      - name: Security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=moderate || {
            echo "⚠️ Security vulnerabilities detected"
            echo "Please run 'npm audit fix' to resolve issues"
            exit 1
          }

      - name: Check bundle size
        run: |
          echo "📦 Checking bundle size..."
          npm run build

          # Check if dist directory was created
          if [[ -d "dist" ]]; then
            BUNDLE_SIZE=$(du -sh dist | cut -f1)
            echo "Bundle size: $BUNDLE_SIZE"
            
            # DXT package size check
            npm run dxt:package
            if [[ -f *.dxt ]]; then
              DXT_SIZE=$(du -sh *.dxt | cut -f1)
              echo "DXT package size: $DXT_SIZE"
            fi
          fi

      - name: Preview beta version
        id: beta_version
        run: |
          BASE_VERSION=$(node -pe "require('./package.json').version")
          BETA_VERSION="$BASE_VERSION-beta.$(date +%Y%m%d%H%M%S)"
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_OUTPUT
          echo "📦 This PR will create beta version: $BETA_VERSION"

      - name: PR Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const { BETA_VERSION } = process.env;

            const body = `## 🤖 PR Validation Summary

            ✅ **All checks passed!** This PR is ready for review.

            ### What happens when merged:
            - 🚀 **Beta Release**: \`${BETA_VERSION}\`
            - 📦 **NPM**: Available at \`npm install workspaces-mcp@beta\`
            - 🐙 **GitHub**: Pre-release with DXT file for Claude Desktop
            - 🔄 **Auto-deployment**: Immediate availability for testing

            ### Test Coverage: 
            - Current coverage maintained above 70%
            - All 280+ tests passing

            ### Security:
            - No high/critical vulnerabilities detected
            - Dependencies are up to date

            Ready to merge! 🎉
            `;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Summary')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
        env:
          BETA_VERSION: ${{ steps.beta_version.outputs.BETA_VERSION }}

      - name: Cleanup
        if: always()
        run: |
          rm -f changed_files.txt coverage.json *.dxt
